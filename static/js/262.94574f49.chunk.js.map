{"version":3,"file":"static/js/262.94574f49.chunk.js","mappings":"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","sources":["webpack://todo_woman_up/./src/pages/Settings/AvatarField/AvatarField.module.scss?1d36","pages/Settings/AvatarField/index.tsx","hooks/useAvatarUpload.ts","webpack://todo_woman_up/./src/pages/Settings/Settings.module.scss?902c","pages/Settings/UserDataField/index.tsx","pages/Settings/PasswordField/index.tsx","pages/Settings/index.tsx","hooks/useSettingsValidate.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AvatarField_container__XLH33\",\"avatar_wrapper\":\"AvatarField_avatar_wrapper__HV2gf\",\"avatar\":\"AvatarField_avatar__RmQsX\",\"avatar_upload_button\":\"AvatarField_avatar_upload_button__HwYmp\",\"hidden\":\"AvatarField_hidden__M+VVd\",\"error\":\"AvatarField_error__p1vWu\",\"button_uploading_animation\":\"AvatarField_button_uploading_animation__5WqF8\",\"submitAnimation\":\"AvatarField_submitAnimation__DVi7x\"};","import React from 'react';\r\nimport { useAppSelector } from '../../../hooks/storeHook';\r\nimport useAvatarUpload from '../../../hooks/useAvatarUpload';\r\nimport { settingsSliceSelector, UserdataUpdateStatus } from '../../../Redux/settingsSlice';\r\nimport { userSliceSelector } from '../../../Redux/userSlice';\r\n\r\nimport avatarPlaceholder from '../../../assets/avatar_placeholder.png';\r\n\r\nimport styles from \"./AvatarField.module.scss\"\r\n\r\nconst AvatarField = () => {\r\n  const { photo } = useAppSelector(userSliceSelector);\r\n  const { errors, avatarError, status } = useAppSelector(settingsSliceSelector);\r\n\r\n  const avatarRef = React.useRef<HTMLInputElement>(null);\r\n  const setAvatar = useAvatarUpload();\r\n  \r\n  const [fileChanged, setFileChanged] = React.useState<boolean>(false);\r\n\r\n  React.useEffect(() => {\r\n    setAvatar(avatarRef);\r\n  }, [fileChanged]);\r\n\r\n  return (\r\n    <fieldset className={styles.avatar_wrapper}>\r\n      <img className={styles.avatar} src={photo || avatarPlaceholder} alt=\"Аватарка\" />\r\n      <input\r\n        className={styles.hidden}\r\n        ref={avatarRef}\r\n        type=\"file\"\r\n        name=\"photo\"\r\n        id=\"photo\"\r\n        accept=\"image/jpeg\"\r\n        onChange={() => setFileChanged((state) => !state)}\r\n      />\r\n      <button\r\n        type=\"button\"\r\n        disabled={status === UserdataUpdateStatus.UPLOADING}\r\n        className={`${styles.avatar_upload_button} ${\r\n          status === UserdataUpdateStatus.UPLOADING && styles.button_uploading_animation\r\n        }`}\r\n        onClick={() => avatarRef.current?.click()}>\r\n        Обновить\r\n      </button>\r\n      {avatarError && <span className={styles.error}>{errors.avatar}</span>}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default AvatarField;\r\n","import { userSliceSelector } from './../Redux/userSlice';\r\nimport { useAppDispatch, useAppSelector } from './storeHook';\r\nimport { updateProfile } from 'firebase/auth';\r\nimport { getDocs, collection, updateDoc, doc } from 'firebase/firestore/lite';\r\nimport { ref, deleteObject, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { DB, storageRef, user } from '../firebase';\r\nimport {\r\n  clearSettingErrors,\r\n  setUploadingStatus,\r\n  UserdataUpdateStatus,\r\n  setError,\r\n} from '../Redux/settingsSlice';\r\nimport { setPhoto } from '../Redux/userSlice';\r\n\r\nexport default function useAvatarUpload() {\r\n  const dispatch = useAppDispatch();\r\n  const { photo, id } = useAppSelector(userSliceSelector);\r\n\r\n  return async (avatarRef: React.RefObject<HTMLInputElement>) => {\r\n    dispatch(clearSettingErrors());\r\n\r\n    let avatar = avatarRef.current?.files?.[0];\r\n\r\n    if (avatar && id) {\r\n      dispatch(setUploadingStatus(UserdataUpdateStatus.UPLOADING));\r\n      const accountID = await getDocs(collection(DB, `userData/${id}/user/`)).then(\r\n        (res) => res.docs[0].id,\r\n      );\r\n\r\n      if (photo.includes('firebase') && photo !== null) {\r\n        const currentPhotoName = photo.split('%2F')[2].split('?')[0];\r\n        const deleteLink = ref(storageRef, `${id}/avatar/${currentPhotoName}`);\r\n        deleteObject(deleteLink);\r\n      }\r\n      const avatarLink = ref(storageRef, `${id}/avatar/${avatar.name}`);\r\n\r\n      if (avatar.size <= 3145728) {\r\n        \r\n        try {\r\n          await uploadBytes(avatarLink, avatar);\r\n          getDownloadURL(avatarLink).then((url) => {\r\n            user && updateProfile(user, { photoURL: url });\r\n            updateDoc(doc(DB, `userData/${id}/user/${accountID}`), {\r\n              photo: url,\r\n            });\r\n            dispatch(setPhoto(url));\r\n            dispatch(setUploadingStatus(UserdataUpdateStatus.SUCCESS));\r\n          });\r\n        } catch (error) {\r\n          dispatch(setUploadingStatus(UserdataUpdateStatus.ERROR));\r\n          alert('Аватар не обновился');\r\n        }\r\n\r\n      } else {\r\n        dispatch(setError('avatar'));\r\n      }\r\n    }\r\n  };\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Settings_container__ted4K\",\"header\":\"Settings_header__eCHOc\",\"form\":\"Settings_form__YiLQK\",\"user_data\":\"Settings_user_data__TKjbW\",\"password_wrapper\":\"Settings_password_wrapper__zOkgF\",\"option\":\"Settings_option__Ww2+7\",\"input\":\"Settings_input__z-jQg\",\"error\":\"Settings_error__-616n\",\"submit_button\":\"Settings_submit_button__44J0Q\",\"button_uploading_animation\":\"Settings_button_uploading_animation__aWjSl\",\"submitAnimation\":\"Settings_submitAnimation__H8Jvq\"};","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/storeHook';\r\nimport {\r\n  setInputs,\r\n  setSettingsInitialState,\r\n  settingsSliceSelector,\r\n} from '../../../Redux/settingsSlice';\r\nimport { userSliceSelector } from '../../../Redux/userSlice';\r\n\r\nimport styles from '../Settings.module.scss';\r\n\r\nconst UserDataField = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { nameInput, emailInput, lastnameInput, errors, nameError, lastnameError, emailError } =\r\n    useAppSelector(settingsSliceSelector);\r\n  const { name, email, lastname } = useAppSelector(userSliceSelector);\r\n\r\n  React.useEffect(() => {\r\n    if (name.length > 0) {\r\n      dispatch(setSettingsInitialState({ name, email, lastname }));\r\n    }\r\n  }, [name]);\r\n\r\n  return (\r\n    <fieldset className={styles.user_data}>\r\n      <label className={styles.option}>\r\n        Имя\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          maxLength={40}\r\n          onChange={(event) => dispatch(setInputs(event))}\r\n          value={nameInput}\r\n        />\r\n      </label>\r\n      {nameError && <span className={styles.error}>{errors.name}</span>}\r\n      <label className={styles.option}>\r\n        Фамилия\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"lastname\"\r\n          maxLength={40}\r\n          onChange={(event) => dispatch(setInputs(event))}\r\n          value={lastnameInput}\r\n        />\r\n      </label>\r\n      {lastnameError && <span className={styles.error}>{errors.lastname}</span>}\r\n      <label className={styles.option}>\r\n        Email\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"email\"\r\n          maxLength={40}\r\n          onChange={(event) => dispatch(setInputs(event))}\r\n          value={emailInput}\r\n        />\r\n      </label>\r\n      {emailError && <span className={styles.error}>{errors.email}</span>}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default UserDataField;\r\n","import { useAppDispatch, useAppSelector } from '../../../hooks/storeHook';\r\nimport { setInputs, settingsSliceSelector } from '../../../Redux/settingsSlice';\r\n\r\nimport styles from '../Settings.module.scss';\r\n\r\nconst PasswordField = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    currentPasswordInput,\r\n    newPasswordInput,\r\n    repeatNewPasswordInput,\r\n    errors,\r\n    currentPasswordError,\r\n    newPasswordError,\r\n    repeatPasswordError,\r\n  } = useAppSelector(settingsSliceSelector);\r\n\r\n  return (\r\n    <fieldset className={styles.password_wrapper}>\r\n      <label className={styles.option}>\r\n        Текущий пароль\r\n        <input\r\n          className={styles.input}\r\n          type=\"password\"\r\n          name=\"currentPassword\"\r\n          maxLength={30}\r\n          onChange={(event) => dispatch(setInputs(event))}\r\n          value={currentPasswordInput}\r\n        />\r\n      </label>\r\n      {currentPasswordError && <span className={styles.error}>{errors.wrongPassword}</span>}\r\n      <label className={styles.option}>\r\n        Новый пароль\r\n        <input\r\n          className={styles.input}\r\n          type=\"password\"\r\n          name=\"newPassword\"\r\n          maxLength={30}\r\n          onChange={(event) => dispatch(setInputs(event))}\r\n          value={newPasswordInput}\r\n        />\r\n      </label>\r\n      {newPasswordError && <span className={styles.error}>{errors.notMatch}</span>}\r\n      {repeatPasswordError && <span className={styles.error}>{errors.password}</span>}\r\n      <label className={styles.option}>\r\n        Повторите новый пароль\r\n        <input\r\n          className={styles.input}\r\n          type=\"password\"\r\n          name=\"repeatNewPassword\"\r\n          maxLength={30}\r\n          onChange={(event) => dispatch(setInputs(event))}\r\n          value={repeatNewPasswordInput}\r\n        />\r\n      </label>\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default PasswordField;\r\n","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/storeHook';\r\nimport {\r\n  clearSettingErrors,\r\n  settingsSliceSelector,\r\n  UserdataUpdateStatus,\r\n} from '../../Redux/settingsSlice';\r\nimport useSettingsValidate from '../../hooks/useSettingsValidate';\r\n\r\nimport AvatarField from './AvatarField';\r\nimport UserDataField from './UserDataField';\r\nimport PasswordField from './PasswordField';\r\n\r\nimport styles from './Settings.module.scss';\r\n\r\nconst Settings: React.FC<{ showMenu: boolean }> = ({ showMenu }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { status } = useAppSelector(settingsSliceSelector);\r\n\r\n  const validate = useSettingsValidate();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(clearSettingErrors());\r\n  }, []);\r\n\r\n  return (\r\n    <section className={`${styles.settings} ${styles.container}`} data-menu={showMenu}>\r\n      <h2 className={styles.header}>Настройки профиля</h2>\r\n      <form\r\n        className={styles.form}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          validate();\r\n        }}>\r\n        <AvatarField />\r\n        <UserDataField />\r\n        <PasswordField />\r\n        <button\r\n          disabled={status === UserdataUpdateStatus.UPLOADING}\r\n          type=\"submit\"\r\n          className={`${styles.submit_button} ${\r\n            status === UserdataUpdateStatus.UPLOADING && styles.button_uploading_animation\r\n          }`}>\r\n          Сохранить\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { DB, user } from '../firebase';\r\nimport { updatePassword, updateProfile, updateEmail } from 'firebase/auth';\r\nimport { getDocs, collection, updateDoc, doc } from 'firebase/firestore/lite';\r\nimport { useAppDispatch, useAppSelector } from './storeHook';\r\nimport {\r\n  clearPasswordInputs,\r\n  clearSettingErrors,\r\n  setError,\r\n  settingsSliceSelector,\r\n  setUploadingStatus,\r\n  UserdataUpdateStatus,\r\n} from './../Redux/settingsSlice';\r\nimport { setName, setLastname, setEmail, userSliceSelector } from '../Redux/userSlice';\r\n\r\nexport default function useSettingsValidate() {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    nameInput,\r\n    lastnameInput,\r\n    emailInput,\r\n    newPasswordInput,\r\n    currentPasswordInput,\r\n    repeatNewPasswordInput,\r\n  } = useAppSelector(settingsSliceSelector);\r\n  const { id } = useAppSelector(userSliceSelector);\r\n\r\n  return async () => {\r\n    dispatch(clearSettingErrors());\r\n\r\n    // ВАЛИДАЦИЯ\r\n    let nameValid = /^[а-яёА-Яёa-zA-Z]+$/.test(nameInput as string);\r\n    let lastnameValid = /^[а-яёА-Яёa-zA-Z]+$/.test(lastnameInput as string);\r\n    let emailValid = /^([a-zA-Z0-9\\\\.\\\\_\\\\-]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+)$/.test(emailInput);\r\n    let newPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(\r\n      newPasswordInput as string,\r\n    );\r\n\r\n    // ДАННЫЕ ПОЛЬЗОВАТЕЛЯ\r\n    const accountData = await getDocs(collection(DB, `userData/${id}/user/`)).then(\r\n      (res) => res.docs[0],\r\n    );\r\n    const accountID = accountData.id;\r\n    const pass = accountData.data().password;\r\n\r\n    // ОБНОВЛЕНИЕ ПАРОЛЯ\r\n    if (currentPasswordInput === pass) {\r\n      dispatch(setUploadingStatus(UserdataUpdateStatus.UPLOADING));\r\n\r\n      if (newPassword && newPasswordInput === repeatNewPasswordInput) {\r\n\r\n        try {\r\n          user && (await updatePassword(user, newPasswordInput));\r\n          updateDoc(doc(DB, `userData/${id}/user/${accountID}`), {\r\n            password: newPasswordInput,\r\n          });\r\n          dispatch(clearPasswordInputs());\r\n          dispatch(setUploadingStatus(UserdataUpdateStatus.SUCCESS));\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Не удалось обновить пароль\")\r\n        }\r\n\r\n      } else {\r\n        dispatch(setUploadingStatus(UserdataUpdateStatus.ERROR));\r\n        dispatch(setError('new password'));\r\n      }\r\n      \r\n    } else {\r\n      currentPasswordInput.length && dispatch(setError('current password'));\r\n    }\r\n\r\n    // ОБНОВЛЕНИЕ ДАННЫХ ПОЛЬЗОВАТЕЛЯ\r\n    !nameValid && dispatch(setError('name'));\r\n\r\n    !lastnameValid && lastnameInput.length && dispatch(setError('lastname'));\r\n\r\n    !emailValid && dispatch(setError('email'));\r\n\r\n    if (nameValid && emailValid && (lastnameValid || !lastnameInput.length)) {\r\n      dispatch(setUploadingStatus(UserdataUpdateStatus.UPLOADING));\r\n\r\n      try {\r\n        updateDoc(doc(DB, `userData/${id}/user/${accountID}`), {\r\n          name: nameInput,\r\n          lastname: lastnameInput,\r\n          email: emailInput,\r\n        });\r\n\r\n        user &&\r\n          updateProfile(user, { displayName: `${nameInput} ${lastnameInput}` }).then(() => {\r\n            dispatch(setUploadingStatus(UserdataUpdateStatus.SUCCESS));\r\n          });\r\n\r\n        user &&\r\n          updateEmail(user, emailInput).then(() => {\r\n            dispatch(setUploadingStatus(UserdataUpdateStatus.SUCCESS));\r\n          });\r\n\r\n        dispatch(setName(nameInput));\r\n        dispatch(setLastname(lastnameInput));\r\n        dispatch(setEmail(emailInput));\r\n      } catch (error) {\r\n        console.error(error);\r\n        dispatch(setUploadingStatus(UserdataUpdateStatus.ERROR));\r\n        alert(\"Не удалось обновить данные пользователя\")\r\n      }\r\n    }\r\n  };\r\n}\r\n"],"names":["photo","useAppSelector","userSliceSelector","settingsSliceSelector","errors","avatarError","status","avatarRef","React","setAvatar","dispatch","useAppDispatch","id","clearSettingErrors","avatar","current","files","setUploadingStatus","UserdataUpdateStatus","getDocs","collection","DB","then","res","docs","accountID","includes","currentPhotoName","split","deleteLink","ref","storageRef","deleteObject","avatarLink","name","size","uploadBytes","getDownloadURL","url","user","updateProfile","photoURL","updateDoc","doc","setPhoto","alert","setError","useAvatarUpload","fileChanged","setFileChanged","className","styles","src","avatarPlaceholder","alt","type","accept","onChange","state","disabled","onClick","click","nameInput","emailInput","lastnameInput","nameError","lastnameError","emailError","email","lastname","length","setSettingsInitialState","maxLength","event","setInputs","value","currentPasswordInput","newPasswordInput","repeatNewPasswordInput","currentPasswordError","newPasswordError","repeatPasswordError","wrongPassword","notMatch","password","showMenu","validate","nameValid","test","lastnameValid","emailValid","newPassword","accountData","pass","data","updatePassword","clearPasswordInputs","console","error","displayName","updateEmail","setName","setLastname","setEmail","useSettingsValidate","onSubmit","e","preventDefault"],"sourceRoot":""}