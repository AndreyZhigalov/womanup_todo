{"version":3,"file":"static/js/322.2b27665d.chunk.js","mappings":"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","sources":["components/TaskCard/TaskButton/index.tsx","webpack://todo_woman_up/./src/components/TaskCard/TaskCard.module.scss?71e6","components/TaskCard/TaskDeadline/index.tsx","components/TaskCard/TaskDescription/index.tsx","components/TaskCard/TaskFiles/index.tsx","components/TaskCard/TaskHeader/index.tsx","components/TaskCard/index.tsx","webpack://todo_woman_up/./src/components/TaskGroup/TaskGroup.module.scss?44a4","components/TaskGroup/index.tsx","webpack://todo_woman_up/./src/components/TaskGroupTabs/TaskGroupTabs.module.scss?8948","components/TaskGroupTabs/index.tsx","webpack://todo_woman_up/./src/pages/Overview/Overview.module.scss?75fd","pages/Overview/index.tsx"],"sourcesContent":["import React from 'react';\r\n\r\ntype ButtonPropsType = {\r\n  isEditable: boolean;\r\n  styles: {\r\n    readonly [key: string]: string;\r\n  };\r\n  updateHandler: (value: boolean) => void;\r\n  removeHandler: () => void;\r\n};\r\n\r\nconst TaskButton: React.FC<ButtonPropsType> = ({\r\n  isEditable,\r\n  updateHandler,\r\n  removeHandler,\r\n  styles,\r\n}) => {\r\n  return (\r\n    <>\r\n      {isEditable ? (\r\n        <i\r\n          onClick={() => updateHandler(false)}\r\n          className={styles.agree_text_change + ' fa-solid fa-check-to-slot'}></i>\r\n      ) : (\r\n        <i onClick={removeHandler} className={styles.remove_task + ' fa-regular fa-trash-can'}></i>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskButton;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TaskCard_container__Xxu9s\",\"task_card\":\"TaskCard_task_card__xk7C2\",\"card_header\":\"TaskCard_card_header__np188\",\"attached_files\":\"TaskCard_attached_files__xxYZy\",\"file_count\":\"TaskCard_file_count__6sH5Q\",\"file_input_options\":\"TaskCard_file_input_options__fREw6\",\"card_text\":\"TaskCard_card_text__28p0T\",\"card_readers\":\"TaskCard_card_readers__Kwy4p\",\"card_deadline\":\"TaskCard_card_deadline__Q6me1\",\"failed\":\"TaskCard_failed__8dVby\",\"agree_text_change\":\"TaskCard_agree_text_change__9vP+Z\",\"remove_task\":\"TaskCard_remove_task__i5gNB\",\"input__hidden\":\"TaskCard_input__hidden__O-ACi\",\"grabbing\":\"TaskCard_grabbing__tFCmv\"};","import React from 'react';\r\n\r\ntype DeadlinePropsType = {\r\n  isEditable: boolean;\r\n  date: string;\r\n  styles: {\r\n    readonly [key: string]: string;\r\n  };\r\n  handler: (value: string) => void;\r\n};\r\n\r\nconst TaskDeadline: React.FC<DeadlinePropsType> = ({ styles, date, isEditable, handler }) => {\r\n  const dateRef = React.useRef<HTMLInputElement>(null);\r\n  const deadlineTimecode = new Date(date as string).getTime();\r\n\r\n  return (\r\n    <>\r\n      <span\r\n        onClick={() => dateRef?.current?.showPicker()}\r\n        className={`${styles.card_deadline} ${\r\n          deadlineTimecode < new Date().getTime() && date ? styles.failed : ''\r\n        }`}>\r\n        {`${date} `}\r\n        {isEditable && (\r\n          <i className=\"fa-regular fa-calendar\">\r\n            <input\r\n              ref={dateRef}\r\n              type=\"date\"\r\n              className={styles.input__hidden}\r\n              onChange={(e) => handler(e.target.value)}\r\n            />\r\n          </i>\r\n        )}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskDeadline;\r\n","import React from 'react';\r\n\r\ntype DescriptionPropsType = {\r\n  isEditable: boolean;\r\n  text: string;\r\n  styles: {\r\n    readonly [key: string]: string;\r\n  };\r\n  handler: (value: string) => void;\r\n  updateHandler: (value: boolean) => void;\r\n};\r\n\r\nconst TaskDescription: React.FC<DescriptionPropsType> = ({\r\n  isEditable,\r\n  text,\r\n  styles,\r\n  handler,\r\n  updateHandler,\r\n}) => {\r\n  return (\r\n    <>\r\n      {!isEditable ? (\r\n        <p className={styles.card_text}>{text}</p>\r\n      ) : (\r\n        <textarea\r\n          aria-label=\"input\"\r\n          readOnly={!isEditable}\r\n          className={styles.card_text}\r\n          onKeyDown={(e) => e.ctrlKey && e.code === 'Enter' && updateHandler(false)}\r\n          onChange={(e) => handler(e.target.value)}\r\n          value={text}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskDescription;\r\n","import React from 'react';\r\n\r\ntype FilePropsType = {\r\n  styles: {\r\n    readonly [key: string]: string;\r\n  };\r\n  fileNames: string[];\r\n  refElem: React.RefObject<HTMLInputElement>;\r\n  uploadHandler: () => void;\r\n  downloadHandler: () => void;\r\n  menuToggler: () => void;\r\n  showMenu: boolean;\r\n};\r\n\r\nconst TaskFiles: React.FC<FilePropsType> = ({\r\n  styles,\r\n  fileNames,\r\n  refElem,\r\n  uploadHandler,\r\n  downloadHandler,\r\n  menuToggler,\r\n  showMenu,\r\n}) => {\r\n  const onClickFileInput = () => {\r\n    menuToggler();\r\n    refElem.current?.click();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <i className={styles.attached_files + ' fa-solid fa-paperclip'} onClick={menuToggler}>\r\n        {!!fileNames.length && <span className={styles.file_count}>{fileNames.length}</span>}\r\n        <input\r\n          type={'file'}\r\n          className={styles.input__hidden}\r\n          onChange={uploadHandler}\r\n          multiple\r\n          ref={refElem}></input>\r\n        {showMenu && (\r\n          <div className={styles.file_input_options}>\r\n            <p onClick={downloadHandler}>Скачать</p>\r\n            <p onClick={onClickFileInput}>Добавить</p>\r\n          </div>\r\n        )}\r\n      </i>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskFiles;\r\n","import React from 'react';\r\n\r\ntype HeaderPropsType = {\r\n  isEditable: boolean;\r\n  text: string;\r\n  styles: {\r\n    readonly [key: string]: string;\r\n  };\r\n  handler: (value: string) => void;\r\n};\r\n\r\nconst TaskHeader: React.FC<HeaderPropsType> = ({ isEditable, text, styles, handler }) => {\r\n  return (\r\n    <>\r\n      {!isEditable ? (\r\n        <h5 className={styles.card_header}>{text}</h5>\r\n      ) : (\r\n        <input\r\n          aria-label=\"input\"\r\n          className={styles.card_header}\r\n          readOnly={!isEditable}\r\n          onChange={(e) => handler(e.target.value)}\r\n          value={text}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskHeader;\r\n","import React from 'react';\r\nimport { useAppDispatch } from '../../hooks/storeHook';\r\n\r\nimport {\r\n  deleteTaskOnServer,\r\n  downloadFilesFromServer,\r\n  removeCard,\r\n  setTaskGroup,\r\n  TaskDataType,\r\n  updateCard,\r\n  updateTask,\r\n  uploadFilesOnServer,\r\n} from '../../Redux/tasksSlice';\r\nimport TaskButton from './TaskButton';\r\n\r\nimport styles from './TaskCard.module.scss';\r\nimport TaskDeadline from './TaskDeadline';\r\nimport TaskDescription from './TaskDescription';\r\nimport TaskFiles from './TaskFiles';\r\nimport TaskHeader from './TaskHeader';\r\n\r\nexport type TaskCardType = {\r\n  taskData: TaskDataType;\r\n  droppedGroup: string | undefined;\r\n};\r\n\r\nconst TaskCard: React.FC<TaskCardType> = ({\r\n  taskData: {\r\n    taskID,\r\n    text,\r\n    header,\r\n    editable,\r\n    deadline,\r\n    readers,\r\n    isCurrent,\r\n    isInQueue,\r\n    isCompleted,\r\n    files,\r\n  },\r\n  droppedGroup,\r\n}) => {\r\n  const dispatch = useAppDispatch();\r\n  const [isEditable, setIsEditable] = React.useState<boolean>(editable);\r\n  const taskObj: TaskDataType = {\r\n    taskID,\r\n    text,\r\n    header,\r\n    editable,\r\n    deadline,\r\n    readers,\r\n    isCurrent,\r\n    isInQueue,\r\n    isCompleted,\r\n    files,\r\n  };\r\n  const [headerText, setHeaderText] = React.useState<string>(header);\r\n  const [taskText, setTaskText] = React.useState<string>(text);\r\n  const [dateText, setDateText] = React.useState<string | null>(deadline);\r\n  const [showFileInputMenu, setShowFileInputMenu] = React.useState<boolean>(false);\r\n  const TaskCardRef = React.useRef<HTMLLIElement>(null);\r\n  const filesRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  const updatedTask = {\r\n    ...taskObj,\r\n    header: headerText,\r\n    text: taskText,\r\n    editable: false,\r\n    deadline: dateText,\r\n    isCurrent,\r\n    isInQueue,\r\n    isCompleted,\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const fileInputClickHandler = (e: MouseEvent) => {\r\n      if (TaskCardRef.current && !e.composedPath().includes(TaskCardRef.current)) {\r\n        setShowFileInputMenu(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('click', (e) => fileInputClickHandler(e));\r\n\r\n    return document.removeEventListener('click', (e) => fileInputClickHandler(e));\r\n  }, []);\r\n\r\n  const onClickUpdateTask = (state: boolean) => {\r\n    if (state) {\r\n      setIsEditable(state);\r\n    } else {\r\n      setIsEditable(false);\r\n      dispatch(updateCard(updatedTask));\r\n      dispatch(updateTask(updatedTask));\r\n    }\r\n  };\r\n\r\n  const onClickRemoveTask = () => {\r\n    dispatch(removeCard(taskID));\r\n    dispatch(deleteTaskOnServer({ taskID, files }));\r\n  };\r\n\r\n  const downloadFiles = () => {\r\n    if (files.length) {\r\n      dispatch(downloadFilesFromServer(taskID));\r\n    }\r\n  };\r\n\r\n  const uploadFiles = () => {\r\n    if (filesRef.current?.files) {\r\n      dispatch(uploadFilesOnServer({ files: filesRef.current.files, taskID }));\r\n    }\r\n  };\r\n\r\n  const setTaskToNewGroup = () => {\r\n    dispatch(setTaskGroup([taskID, droppedGroup as string]));\r\n    dispatch(\r\n      updateTask({\r\n        ...updatedTask,\r\n        isCurrent: droppedGroup === 'current' ? true : false,\r\n        isInQueue: droppedGroup === 'inQueue' ? true : false,\r\n        isCompleted: droppedGroup === 'completed' ? true : false,\r\n      }),\r\n    );\r\n  };\r\n\r\n  let timer: NodeJS.Timeout;\r\n\r\n  return (\r\n    <li\r\n      ref={TaskCardRef}\r\n      className={styles.task_card}\r\n      onTouchStart={() => (timer = setTimeout(() => onClickUpdateTask(true), 500))}\r\n      onTouchEnd={() => clearTimeout(timer)}\r\n      onDoubleClick={() => onClickUpdateTask(true)}\r\n      onDragStart={(e) => {\r\n        e.dataTransfer.dropEffect = 'move';\r\n        e.dataTransfer.effectAllowed = 'move';\r\n      }}\r\n      onDragEnd={setTaskToNewGroup}\r\n      onKeyDown={(e) => e.code === 'Escape' && setIsEditable(false)}\r\n      draggable={!isEditable}>\r\n      <TaskHeader\r\n        isEditable={isEditable}\r\n        text={headerText}\r\n        styles={styles}\r\n        handler={setHeaderText}\r\n      />\r\n      <TaskFiles\r\n        styles={styles}\r\n        fileNames={files}\r\n        refElem={filesRef}\r\n        uploadHandler={uploadFiles}\r\n        downloadHandler={downloadFiles}\r\n        menuToggler={() => setShowFileInputMenu((state) => !state)}\r\n        showMenu={showFileInputMenu}\r\n      />\r\n      <TaskDescription\r\n        isEditable={isEditable}\r\n        text={taskText}\r\n        styles={styles}\r\n        handler={setTaskText}\r\n        updateHandler={onClickUpdateTask}\r\n      />\r\n      <div className={styles.card_readers}></div>\r\n      <TaskDeadline\r\n        styles={styles}\r\n        date={dateText ?? 'Бессрочно'}\r\n        isEditable={isEditable}\r\n        handler={setDateText}\r\n      />\r\n      <TaskButton\r\n        isEditable={isEditable}\r\n        updateHandler={onClickUpdateTask}\r\n        removeHandler={onClickRemoveTask}\r\n        styles={styles}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TaskGroup_container__3eYsl\",\"current_tasks_block\":\"TaskGroup_current_tasks_block__LYdBw\",\"inQueue_tasks_block\":\"TaskGroup_inQueue_tasks_block__H1xpY\",\"completed_tasks_block\":\"TaskGroup_completed_tasks_block__Kxei+\",\"tasks_block_header\":\"TaskGroup_tasks_block_header__oO9hU\",\"add_task_button\":\"TaskGroup_add_task_button__5v-RP\"};","import React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/storeHook';\r\nimport {\r\n  addNewCard,\r\n  AddTaskStatus,\r\n  FetchTaskListStatus,\r\n  taskListSelector,\r\n} from '../../Redux/tasksSlice';\r\n\r\nimport TaskCard from '../TaskCard';\r\n\r\nimport styles from './TaskGroup.module.scss';\r\n\r\ntype TaskGroupType = {\r\n  currentGroup: string;\r\n  setDroppedGroup: (group: string) => void;\r\n  droppedGroup: string;\r\n  tabGroup: number;\r\n};\r\n\r\nconst TaskGroup: React.FC<TaskGroupType> = ({ currentGroup, setDroppedGroup, droppedGroup , tabGroup}) => {\r\n  const dispatch = useAppDispatch();\r\n  const { input } = useAppSelector((state) => state.searchSlice);\r\n  const { taskList, status } = useAppSelector(taskListSelector);\r\n\r\n  const addTask = (type: string) => {\r\n    if (status === AddTaskStatus.WAITING || status === FetchTaskListStatus.SUCCESS)\r\n      dispatch(addNewCard(type));\r\n  };\r\n\r\n  const groupHeader =\r\n    currentGroup === 'current'\r\n      ? 'Текущие'\r\n      : currentGroup === 'inQueue'\r\n      ? 'В очереди'\r\n      : 'Выполненные';\r\n\r\n  const groupClass =\r\n    currentGroup === 'current'\r\n      ? styles.current_tasks_block\r\n      : currentGroup === 'inQueue'\r\n      ? styles.inQueue_tasks_block\r\n      : styles.completed_tasks_block;\r\n\r\n  return (\r\n    <ul\r\n      data-tab-group={`${tabGroup}`}\r\n      className={groupClass}\r\n      onDragOverCapture={(e) => {\r\n        e.preventDefault();\r\n        setDroppedGroup(currentGroup);\r\n      }}>\r\n      <h4 className={styles.tasks_block_header}>{groupHeader}</h4>\r\n      <button className={styles.add_task_button} onClick={() => addTask(currentGroup)}>\r\n        +\r\n      </button>\r\n      {taskList\r\n        .filter((item) => item.header.toLowerCase().includes(input?.toLowerCase()))\r\n        .map((task) => {\r\n          if (currentGroup === 'current') {\r\n            return (\r\n              task.isCurrent && (\r\n                <TaskCard key={task.taskID} taskData={task} droppedGroup={droppedGroup} />\r\n              )\r\n            );\r\n          }\r\n          if (currentGroup === 'inQueue') {\r\n            return (\r\n              task.isInQueue && (\r\n                <TaskCard key={task.taskID} taskData={task} droppedGroup={droppedGroup} />\r\n              )\r\n            );\r\n          }\r\n          return (\r\n            task.isCompleted && (\r\n              <TaskCard key={task.taskID} taskData={task} droppedGroup={droppedGroup} />\r\n            )\r\n          );\r\n        })\r\n        .reverse()}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TaskGroup;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TaskGroupTabs_container__wjus2\",\"tabs\":\"TaskGroupTabs_tabs__2fQy7\",\"tab\":\"TaskGroupTabs_tab__z93lk\",\"arrows\":\"TaskGroupTabs_arrows__PuPui\"};","import React from 'react'\r\n\r\nimport styles from \"./TaskGroupTabs.module.scss\"\r\n\r\ntype GroupTabs = {\r\n  tabGroup: number;\r\n  setTabGroup: React.Dispatch<React.SetStateAction<number>>;\r\n  onDragOverTab: (group: string, e: React.DragEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst TaskGroupTabs: React.FC<GroupTabs> = ({ tabGroup, onDragOverTab, setTabGroup }) => {\r\n  return (\r\n    <ul className={styles.tabs} data-tab-group={tabGroup}>\r\n      <li className={styles.arrows}>\r\n        <button onClick={() => tabGroup > 1 && setTabGroup((value) => --value)}>{'<'}</button>\r\n      </li>\r\n      <li\r\n        onDragOverCapture={(e) => onDragOverTab('current', e)}\r\n        className={styles.tab}\r\n        onClick={() => setTabGroup(1)}>\r\n        Текущие\r\n      </li>\r\n      <li\r\n        onDragOverCapture={(e) => onDragOverTab('inQueue', e)}\r\n        className={styles.tab}\r\n        onClick={() => setTabGroup(2)}>\r\n        В очереди\r\n      </li>\r\n      <li\r\n        onDragOverCapture={(e) => onDragOverTab('completed', e)}\r\n        className={styles.tab}\r\n        onClick={() => setTabGroup(3)}>\r\n        Выполненные\r\n      </li>\r\n      <li className={styles.arrows}>\r\n        <button onClick={() => tabGroup < 3 && setTabGroup((value) => ++value)}>{'>'}</button>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TaskGroupTabs","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Overview_container__OwmK9\",\"overview\":\"Overview_overview__K7tBb\",\"loading_wrapper\":\"Overview_loading_wrapper__d5eX3\",\"loading_message\":\"Overview_loading_message__1PSIt\",\"tabs\":\"Overview_tabs__jFoHD\",\"dropArea_prev\":\"Overview_dropArea_prev__-RHGz\",\"dropArea_next\":\"Overview_dropArea_next__rnds8\",\"tab\":\"Overview_tab__omzRl\",\"arrows\":\"Overview_arrows__zBuo1\",\"dots_bars\":\"Overview_dots_bars__VZTzo\",\"db3_1\":\"Overview_db3_1__4-MEQ\",\"db3_2\":\"Overview_db3_2__KcgR6\"};","import React from 'react';\r\nimport TaskGroup from '../../components/TaskGroup';\r\nimport TaskGroupTabs from '../../components/TaskGroupTabs';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/storeHook';\r\nimport {\r\n  addNewTask,\r\n  AddTaskStatus,\r\n  FetchTaskListStatus,\r\n  taskListSelector,\r\n} from '../../Redux/tasksSlice';\r\n\r\nimport styles from './Overview.module.scss';\r\n\r\nconst Overview: React.FC<{ showMenu: boolean }> = ({ showMenu }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { taskList, status } = useAppSelector(taskListSelector);\r\n  const [droppedGroup, setDroppedGroup] = React.useState<string>('');\r\n  const [tabGroup, setTabGroup] = React.useState<number>(1);\r\n\r\n  React.useEffect(() => {\r\n    if (status === AddTaskStatus.ADDED) {\r\n      dispatch(addNewTask(taskList[taskList.length - 1]));\r\n    }\r\n  }, [status]);\r\n\r\n  if (status === FetchTaskListStatus.LOADING) {\r\n    return (\r\n      <section className={`${styles.overview} ${styles.container}`}>\r\n        <div className={styles.loading_wrapper}>\r\n          <div className={styles.dots_bars}></div>\r\n          <span className={styles.loading_message}>Загрузка списка задач</span>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const onDragOverTab = (group: string, e: React.DragEvent<HTMLLIElement>) => {\r\n    e.preventDefault();\r\n    e.dataTransfer.dropEffect = 'move';\r\n    e.dataTransfer.effectAllowed = 'move';\r\n    setDroppedGroup(group);\r\n  };\r\n\r\n  const onDragOverDropArea = (group: string, e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    e.dataTransfer.dropEffect = 'move';\r\n    e.dataTransfer.effectAllowed = 'move';\r\n    setDroppedGroup(group);\r\n  };\r\n\r\n  return (\r\n    <section className={`${styles.overview} ${styles.container}`} data-menu={showMenu}>\r\n      <TaskGroupTabs tabGroup={tabGroup} setTabGroup={setTabGroup} onDragOverTab={onDragOverTab} />\r\n      {/* {tabGroup !== 1 && (\r\n        <div       \r\n          onDragOverCapture={(e) =>\r\n            onDragOverDropArea(`${tabGroup === 2 ? 'current' : 'inQueue'}`, e)\r\n          }\r\n          className={styles.dropArea_prev}>\r\n          {tabGroup === 2 ? 'Текущие' : 'В очереди'}\r\n        </div>\r\n      )}\r\n      {tabGroup !== 3 && (\r\n        <div\r\n          onDragOverCapture={(e) =>\r\n            onDragOverDropArea(`${tabGroup === 2 ? 'completed' : 'inQueue'}`, e)\r\n          }\r\n          className={styles.dropArea_next}>\r\n          {tabGroup === 2 ? 'Выполненные' : 'В очереди'}\r\n        </div>\r\n      )} */}\r\n      <TaskGroup\r\n        tabGroup={tabGroup}\r\n        currentGroup={'current'}\r\n        setDroppedGroup={setDroppedGroup}\r\n        droppedGroup={droppedGroup}\r\n      />\r\n      <TaskGroup\r\n        tabGroup={tabGroup}\r\n        currentGroup={'inQueue'}\r\n        setDroppedGroup={setDroppedGroup}\r\n        droppedGroup={droppedGroup}\r\n      />\r\n      <TaskGroup\r\n        tabGroup={tabGroup}\r\n        currentGroup={'completed'}\r\n        setDroppedGroup={setDroppedGroup}\r\n        droppedGroup={droppedGroup}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Overview;\r\n"],"names":["isEditable","updateHandler","removeHandler","styles","onClick","className","agree_text_change","remove_task","date","handler","dateRef","React","deadlineTimecode","Date","getTime","current","showPicker","card_deadline","failed","ref","type","input__hidden","onChange","e","target","value","text","readOnly","card_text","onKeyDown","ctrlKey","code","fileNames","refElem","uploadHandler","downloadHandler","menuToggler","showMenu","attached_files","length","file_count","multiple","file_input_options","click","card_header","taskData","taskID","header","editable","deadline","readers","isCurrent","isInQueue","isCompleted","files","droppedGroup","dispatch","useAppDispatch","setIsEditable","taskObj","headerText","setHeaderText","taskText","setTaskText","dateText","setDateText","showFileInputMenu","setShowFileInputMenu","TaskCardRef","filesRef","updatedTask","fileInputClickHandler","composedPath","includes","document","addEventListener","removeEventListener","timer","onClickUpdateTask","state","updateCard","updateTask","onTouchStart","setTimeout","onTouchEnd","clearTimeout","onDoubleClick","onDragStart","dataTransfer","dropEffect","effectAllowed","onDragEnd","setTaskGroup","draggable","uploadFilesOnServer","downloadFilesFromServer","removeCard","deleteTaskOnServer","currentGroup","setDroppedGroup","tabGroup","input","useAppSelector","searchSlice","taskListSelector","taskList","status","groupHeader","groupClass","onDragOverCapture","preventDefault","AddTaskStatus","FetchTaskListStatus","addNewCard","filter","item","toLowerCase","map","task","reverse","onDragOverTab","setTabGroup","addNewTask","group"],"sourceRoot":""}